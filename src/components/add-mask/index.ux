<template>
    <div class="container">
        <div class="canvas-container">
            <canvas id='canvas'></canvas>
        </div>
        <div class="thumbnail-container">
            <div class="thumbnail" for="{{imageQueue}}" onclick="selectImage($idx)">
                <image src="{{$item.img.src}}"></image>
                <text class="delete-btn" onclick="deleteImage($idx)">x</text>
            </div>
        </div>
        <div class="button-bar">
            <text onclick="addImages">添加</text>
            <text onclick="openSetting">设置</text>
            <text onclick="download">导出</text>
        </div>
        <div class="settings-modal" if="{{showSetting}}">
            <!-- <text>修改图片信息</text> -->
            <div class="items">
                <div class="item">
                <label>相机型号: </label>
                <input type="text" model:value="{{settings.cameraModal}}" placeholder="please input">
                </div>
                <div class="item">
                    <label>镜头型号: </label>
                    <input type="text" model:value="{{settings.lensModal}}" placeholder="please input">
                </div>
                <div class="item">
                    <label>拍摄时间: </label>
                    <input type="text" model:value="{{settings.shootingTime}}" placeholder="please input">
                </div>
                <div class="item">
                    <label>拍摄参数: </label>
                    <input type="text" model:value="{{settings.shootingParams}}" placeholder="please input">
                </div>
            </div>
            <!-- <div class="modal-buttons">
                <text onclick="closeSettings">取消</text>
                <text onclick="saveChanges">保存</text>
            </div> -->
        </div>
    </div>
</template>
<script>
import image from '@system.image'
import media from '@system.media' 
export default {
    data: {
      showSetting: true,
      ctx: null,
      settings:{
          cameraModal:"",
          lensModal:"",
          shootingTime:"",
          shootingParams:""
      },
      imageQueue:[],
      curImageIndex : -1,
      dataURL :""

    },
    onInit() {
      this.$page.setTitleBar({text: '添加水印'})
    },
    onShow() {
      const canvas = this.$element('canvas')
      this.ctx = canvas.getContext("2d")
    },
    openSetting(){
        this.showSetting = !this.showSetting
    },
    async addImages(){
        media.pickImage({
            success: (data) => {
            // 成功回调，处理用户选择的图片
            const { uri,name,size } = data;
            console.log("uri: ",uri,typeof(uri))
            console.log("name: ",name)
            console.log("size: ",size)
            const img = new Image();
            console.log(img)
            img.onload = () => {
                // 将加载的图片添加到队列
                this.imageQueue.push({ img, exif: null });

                // 如果当前没有图片在画布上，初始化第一张图片
                if (this.curImageIndex === -1 && this.imageQueue.length > 0) {
                    this.curImageIndex = 0;
                    this.drawImageWithWatermark(this.imageQueue[0].img);
                }
            };
            
            img.src =this.curImageIndex === -1? "../../assets/images/ZBQ_1101.JPG":"../../assets/images/DSC_0805.jpg"; 
            // 使用图片路径加载图片
            //img.src=uri;
            },
            fail: (data, code) => {
            console.error(`Image selection failed, code: ${code}`, data);
            },
            cancel: () => {
            console.log("Image selection cancelled by the user.");
            },
            complete: () => {
            console.log("Image selection process completed.");
            },
        });
    },
    // loadImage(file) {
    //   return new Promise((resolve) => {
    //     const reader = new FileReader();
    //     reader.onload = (event) => {
    //       const img = new Image();
    //       img.onload = () => resolve(img);
    //       img.src = event.target.result;
    //     };
    //     reader.readAsDataURL(file);
    //   });
    // },
    drawImageWithWatermark(img) {
    //   const canvas = this.$element('canvas')
    //   this.ctx = canvas.getContext("2d")
    //   const canvasWidth = 400;
    //   const canvasHeight = 600;

    // //   canvas.width = canvasWidth;
    // //   canvas.height = canvasHeight;
    //    this.ctx.clearRect(0, 0, canvasWidth, canvasHeight);
    //   //6000 4000 此时为矮胖
    //   const aspectRatio = img.width / img.height;
    //   console.log("width: ",img.width)
    //   console.log("height: ",img.height)
    //   console.log(aspectRatio)
    //   //缩放非标准图像的宽高
    //   let drawWidth, drawHeight;
      
    //   if (aspectRatio > canvasWidth / canvasHeight) {
    //     drawWidth = canvasWidth;
    //     drawHeight = canvasWidth / aspectRatio;
    //   } else {
    //     drawWidth = canvasHeight * aspectRatio;
    //     drawHeight = canvasHeight;
    //   }
    //   console.log(drawWidth,drawHeight)
    //   const offsetX = (canvasWidth - drawWidth) / 2;
    //   const offsetY = (canvasHeight - drawHeight) / 2;

    //   this.ctx.drawImage(img, offsetX, offsetY, drawWidth, drawHeight);
    //   console.log(offsetX, offsetY, drawWidth, drawHeight)
    //   this.ctx.font = "16px Arial";
    //   this.ctx.fillStyle = "black";
    //   this.ctx.fillText(`相机型号: ${this.settings.cameraModel}`, 20, canvasHeight - 80);
    //   this.ctx.fillText(`镜头型号: ${this.settings.lensModel}`, 20, canvasHeight - 60);
    //   this.ctx.fillText(`拍摄时间: ${this.settings.shootingTime}`, 20, canvasHeight - 40);
    //   this.ctx.fillText(`拍摄参数: ${this.settings.shootingParams}`, 20, canvasHeight - 20);
    const imgWidth = img.naturalWidth || img.width;
    const imgHeight = img.naturalHeight || img.height;

    // 动态设置画布宽高
    const canvas = this.$element('canvas');
    const newCanvasWidth = imgWidth; // 设置画布宽为图片宽
    const newCanvasHeight = imgHeight + 30; // 画布高为图片高 + 30px（预留水印区域）

    // 修改 canvas 的 CSS 样式
    canvas.style.width = `${newCanvasWidth}px`;
    canvas.style.height = `${newCanvasHeight}px`;

    // 获取绘图上下文
    const ctx = canvas.getContext("2d");

    // 清空画布
    ctx.clearRect(0, 0, newCanvasWidth, newCanvasHeight);

    // 绘制图片
    ctx.drawImage(img, 0, 0, imgWidth, imgHeight);

    // 添加水印
    ctx.font = "16px Arial";
    ctx.fillStyle = "black";
    ctx.fillText(`相机型号: ${this.settings.cameraModal}`, 10, imgHeight + 10);
    ctx.fillText(`镜头型号: ${this.settings.lensModal}`, 10, imgHeight + 25);

    console.log(`画布宽度: ${newCanvasWidth}px, 高度: ${newCanvasHeight}px`);
      
      canvas.toTempFilePath({
          fileType: 'png',
          success: (res) => {
            this.dataURL = res.tempFilePath
            },
          fail: (err, code) => {  
            prompt.showToast({
                message: `错误原因：${err}, 错误代码：${code}`
            })
        }
      })
      console.log(this.dataURL)
        const link = document.createElement("a");
        link.download = `watermarked_image_${this.curImageIndex + 1}.jpg`;
        link.href = this.dataURL;
        link.click();
    },
    selectImage(index){
        this.curImageIndex = index;
        this.drawImageWithWatermark(this.imageQueue[index].img);
    },
    deleteImage(index) {
      this.imageQueue.splice(index, 1);
      if (this.curImageIndex === index) {
        if (this.imageQueue.length > 0) {
          this.curImageIndex = 0;
          this.drawImageWithWatermark(this.imageQueue[0].img);
        } else {
          this.curImageIndex = -1
          this.ctx.clearRect(0, 0, canvas.width, canvas.height);
        }
      } else if (this.curImageIndex > index) {
        this.curImageIndex--;
      }
    },
    download(){
    }
    
}
</script>
<style lang="less">
@import '../../assets/styles/index.less';

.container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    margin: 20px;
}
.canvas-container {
    width: 90%;
    position: relative;
}
canvas {
    background-color: white;
    width: 600px;
    height: 900px;
}
.thumbnail-container {
    display: flex;
    flex-wrap: nowrap;
    overflow-x: auto;
    width: 90%;
    margin-top: 10px;
    scrollbar-width: thin;
}
.thumbnail {
    position: relative;
    margin: 5px;
    width: 200px;
    height: 200px;
    background-color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    border: 1px solid #ccc;
    border-radius: 5px;
    flex-shrink: 0;
}
.thumbnail image {
    max-width: 100%;
    max-height: 100%;
}
.thumbnail .delete-btn {
    position: absolute;
    top: 5px;
    right: 5px;
    background-color: red;
    color: #ffffff;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    display: flex;
    font-size: 24px;
    line-height: 18px;
    text-align: center;
    cursor: pointer;
}
/* .thumbnail:hover .delete-btn {
    display: flex;
} */
.button-bar {
    display: flex;
    justify-content: space-around;
    width: 90%;
    margin-top: 20px;
}
.button-bar text {
    flex: 1;
    margin: 0 10px;
    padding: 10px;
    font-size: 24px;
    background-color: #d3992d;
    color: white;
    border-radius: 5px;
    cursor: pointer;
    text-align: center;
}
.settings-modal {
    //display: none;
    //position: fixed;
    //top: 50%;
    //left: 50%;
    //transform: translate(-50%, -50%);
    width: 90%;
    background-color: #f4ecec;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
    padding: 10px;
    margin-top: 10px;
    .items{
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-content: center;
        padding: 30px;
        .item{
            width: 100%;
            margin: 3px;
            label{
                padding: 20px
            }
            input{
                width: 60%;
                border-color:#f5deb3;
                border: 1px solid ;
            }
        }
    }
    
}
</style>